generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @unique @default(uuid())
  username           String               @unique
  email              String               @unique
  password           String
  role UserRole                            @default(TRAVELER)
  needPasswordChange Boolean              @default(true)
  status UserStatus                       @default(ACTIVATE)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  travelBuddyRequest TravelBuddyRequest[]
  trip               Trip[]
  userProfile        UserProfile[]
  admin Admin[]
  traveler Traveler[]

  @@map("users")
}

model UserProfile {
  id        String   @id @unique @default(uuid())
  bio       String   @default("")
  age       Int      @default(0)
  phone     String?   @unique
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])

  @@map("userProfiles")
}


model Admin {
  id String @id @unique @default(uuid())
  username String
  userId String @unique
  email String @unique
  profilePhoto String?
  contactNumber String?
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  @@map("admins")
}


model Traveler {
  id String @id @unique @default(uuid())
  userId String @unique
  username String
  email String @unique
  profilePhoto String?
  contactNumber String?
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  @@map("travelers")
}


model Trip {
  id                 String               @id @unique @default(uuid())
  destination        String
  description        String
  type               String
  location           String
  itinerary          String
  photos             String?
  startDate          DateTime
  endDate            DateTime
  activities         String[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  userId             String
  travelBuddyRequest TravelBuddyRequest[]
  user               User                 @relation(fields: [userId], references: [id])

  @@map("trips")
}

model TravelBuddyRequest {
  id        String   @id @unique @default(uuid())
  status    RequestStatus
  agreedToTerms    Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tripId    String
  userId    String
  trip      Trip     @relation(fields: [tripId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("travelBuddyRequests")
}


enum UserStatus {
  ACTIVATE
  DEACTIVATE
  DELETED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  ADMIN
  TRAVELER
}


